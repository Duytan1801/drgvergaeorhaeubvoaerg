import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.utils import resample
from sklearn.metrics import f1_score, roc_auc_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Reshape
from tensorflow.keras.optimizers import Adam
from tensorflow.keras import regularizers
from tensorflow.keras.callbacks import EarlyStopping
import tensorflow as tf

# Set random seeds for reproducibility
np.random.seed(42)
tf.keras.utils.set_random_seed(42)

# Load dataset (replace with your actual file path)
data = pd.read_csv('water_quality_dataset.csv').dropna()
X = data.drop('Potability', axis=1).values  # Features: e.g., pH, Hardness, etc.
y = data['Potability'].values              # Target: Potability (0 or 1)

# Normalize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split into train (60%), validation (20%), test (20%) with stratification
X_temp, X_test, y_temp, y_test = train_test_split(
    X_scaled, y, test_size=0.2, random_state=42, stratify=y
)
X_train, X_val, y_train, y_val = train_test_split(
    X_temp, y_temp, test_size=0.25, random_state=42, stratify=y_temp
)  # 0.25 * 0.8 = 0.2

# Number of bootstrap samples
B = 10

# List to store trained models
models = []

# Early stopping callback
early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)

# Function to build the model
def build_model():
    model = Sequential()
    model.add(Reshape((9, 1), input_shape=(9,)))  # Assuming 9 features
    model.add(LSTM(32, dropout=0.5, kernel_regularizer=regularizers.l2(0.001)))
    model.add(Dense(16, activation='relu', kernel_regularizer=regularizers.l2(0.001)))
    model.add(Dense(1, activation='sigmoid'))
    model.compile(optimizer=Adam(learning_rate=0.0001), loss='binary_crossentropy', metrics=['accuracy'])
    return model

# Train ensemble of models
for b in range(B):
    # Bootstrap sample from training set
    X_boot, y_boot = resample(X_train, y_train, replace=True, n_samples=len(X_train), random_state=b)
    
    # Build and train model
    model = build_model()
    model.fit(
        X_boot, y_boot,
        epochs=100,
        batch_size=16,
        validation_data=(X_val, y_val),
        callbacks=[early_stopping],
        verbose=1
    )
    models.append(model)

# Predict on test set using ensemble
preds = np.zeros((len(X_test), B))
for b in range(B):
    preds[:, b] = models[b].predict(X_test, verbose=0).flatten()

# Average predictions
final_preds = np.mean(preds, axis=1)
final_labels = (final_preds > 0.5).astype(int)

# Evaluate performance
accuracy = np.mean(final_labels == y_test)
f1 = f1_score(y_test, final_labels)
auc = roc_auc_score(y_test, final_preds)

print(f"Test Accuracy: {accuracy:.4f}")
print(f"Test F1-Score: {f1:.4f}")
print(f"Test AUC: {auc:.4f}")
